// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Briofy/fs-go/src/internal/contract/attachable (interfaces: Repository)

// Package AttachableMock is a generated GoMock package.
package AttachableMock

import (
	context "context"
	entity "github.com/Briofy/fs-go/src/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRepository) Create(arg0 context.Context, arg1 *entity.Attachable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockRepository) Delete(arg0 context.Context, arg1 entity.Attachable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), arg0, arg1)
}

// GetAttaches mocks base method
func (m *MockRepository) GetAttaches(arg0 context.Context, arg1 entity.Attachable) ([]*entity.Attach, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttaches", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Attach)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttaches indicates an expected call of GetAttaches
func (mr *MockRepositoryMockRecorder) GetAttaches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttaches", reflect.TypeOf((*MockRepository)(nil).GetAttaches), arg0, arg1)
}
